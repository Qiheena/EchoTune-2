const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../config/botConfig');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('lyrics')
        .setDescription('‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§Ø‡§æ specified ‡§ó‡§æ‡§®‡•á ‡§ï‡•á lyrics ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç')
        .addStringOption(option =>
            option.setName('song')
                .setDescription('‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ (optional - current song ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡§æ‡§≤‡•Ä ‡§õ‡•ã‡§°‡§º‡•á‡§Ç)')
                .setRequired(false)
        ),

    async execute(interaction) {
        await interaction.deferReply();

        const queue = global.getQueue(interaction.guild.id);
        let songName = interaction.options.getString('song');

        if (!songName) {
            if (!queue.nowPlaying) {
                return interaction.editReply('‚ùå ‡§ï‡•ã‡§à ‡§ó‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à! ‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ specify ‡§ï‡§∞‡•á‡§Ç‡•§');
            }
            songName = queue.nowPlaying.info?.title || queue.nowPlaying.title;
        }

        try {
            const axios = require('axios');
            
            const cleanSongName = songName
                .replace(/\(.*?\)/g, '')
                .replace(/\[.*?\]/g, '')
                .replace(/official|video|audio|music|lyric/gi, '')
                .trim();

            const searchUrl = `https://api.lyrics.ovh/suggest/${encodeURIComponent(cleanSongName)}`;
            const searchResponse = await axios.get(searchUrl, { timeout: 5000 });

            if (!searchResponse.data || !searchResponse.data.data || searchResponse.data.data.length === 0) {
                return interaction.editReply('‚ùå ‡§á‡§∏ ‡§ó‡§æ‡§®‡•á ‡§ï‡•á lyrics ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á!');
            }

            const song = searchResponse.data.data[0];
            const lyricsUrl = `https://api.lyrics.ovh/v1/${encodeURIComponent(song.artist.name)}/${encodeURIComponent(song.title)}`;
            const lyricsResponse = await axios.get(lyricsUrl, { timeout: 10000 });

            if (!lyricsResponse.data || !lyricsResponse.data.lyrics) {
                return interaction.editReply('‚ùå ‡§á‡§∏ ‡§ó‡§æ‡§®‡•á ‡§ï‡•á lyrics ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á!');
            }

            let lyrics = lyricsResponse.data.lyrics;
            
            if (lyrics.length > 4000) {
                lyrics = lyrics.substring(0, 3950) + '...\n\n_[Lyrics truncated]_';
            }

            const embed = new EmbedBuilder()
                .setTitle(`üé§ ${song.title}`)
                .setDescription(lyrics)
                .setColor(config.COLORS.INFO)
                .setThumbnail(song.album?.cover_medium || song.artist?.picture_medium)
                .addFields(
                    { name: 'üë§ Artist', value: song.artist?.name || 'Unknown', inline: true },
                    { name: 'üíø Album', value: song.album?.title || 'Unknown', inline: true }
                )
                .setFooter({ text: 'Powered by lyrics.ovh' })
                .setTimestamp();

            return interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Lyrics error:', error.message);
            
            const embed = new EmbedBuilder()
                .setTitle('‚ùå Lyrics ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á')
                .setDescription(`**${songName}** ‡§ï‡•á lyrics ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§\n\n‡§Ü‡§™ manually ‡§Ø‡§π‡§æ‡§Ç search ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n[Genius](https://genius.com)\n[AZLyrics](https://www.azlyrics.com)`)
                .setColor(config.COLORS.ERROR);

            return interaction.editReply({ embeds: [embed] });
        }
    },
};
