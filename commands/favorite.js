const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../config/botConfig');
const { getDb } = require('../src/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('favorite')
        .setDescription('‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§ó‡§æ‡§®‡•á ‡§ï‡•ã favorites ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ favorites list ‡§¶‡•á‡§ñ‡•á‡§Ç')
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')
                .setDescription('‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§ó‡§æ‡§®‡•á ‡§ï‡•ã favorites ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡•á‡§Ç')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('‡§Ö‡§™‡§®‡•Ä favorites list ‡§¶‡•á‡§ñ‡•á‡§Ç')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('play')
                .setDescription('Favorites ‡§∏‡•á ‡§è‡§ï ‡§ó‡§æ‡§®‡§æ ‡§ö‡§≤‡§æ‡§è‡§Ç')
                .addIntegerOption(option =>
                    option.setName('number')
                        .setDescription('Favorite ‡§ï‡§æ number')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('Favorites ‡§∏‡•á ‡§è‡§ï ‡§ó‡§æ‡§®‡§æ ‡§π‡§ü‡§æ‡§è‡§Ç')
                .addIntegerOption(option =>
                    option.setName('number')
                        .setDescription('Favorite ‡§ï‡§æ number')
                        .setRequired(true)
                )
        ),

    async execute(interaction) {
        await interaction.deferReply();

        const subcommand = interaction.options.getSubcommand();
        const userId = interaction.user.id;

        const db = getDb();
        
        db.exec(`CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT NOT NULL,
            title TEXT NOT NULL,
            url TEXT NOT NULL,
            added_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        if (subcommand === 'add') {
            const queue = global.getQueue(interaction.guild.id);
            if (!queue.nowPlaying) {
                return interaction.editReply('‚ùå ‡§ï‡•ã‡§à ‡§ó‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à!');
            }

            const title = queue.nowPlaying.info?.title || queue.nowPlaying.title;
            const url = queue.nowPlaying.url || queue.nowPlaying.info?.uri;

            const existing = db.prepare('SELECT * FROM favorites WHERE user_id = ? AND url = ?').get(userId, url);
            if (existing) {
                return interaction.editReply('‚ùå ‡§Ø‡§π ‡§ó‡§æ‡§®‡§æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Ü‡§™‡§ï‡•á favorites ‡§Æ‡•á‡§Ç ‡§π‡•à!');
            }

            db.prepare('INSERT INTO favorites (user_id, title, url) VALUES (?, ?, ?)').run(userId, title, url);

            const embed = new EmbedBuilder()
                .setTitle('üíñ Favorite Added!')
                .setDescription(`**${title}** ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•á favorites ‡§Æ‡•á‡§Ç add ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!`)
                .setColor(config.COLORS.SUCCESS)
                .setTimestamp();

            return interaction.editReply({ embeds: [embed] });

        } else if (subcommand === 'list') {
            const favorites = db.prepare('SELECT * FROM favorites WHERE user_id = ? ORDER BY added_at DESC').all(userId);

            if (favorites.length === 0) {
                return interaction.editReply('‚ùå ‡§Ü‡§™‡§ï‡•Ä favorites list ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à! `/favorite add` ‡§∏‡•á ‡§ó‡§æ‡§®‡•á add ‡§ï‡§∞‡•á‡§Ç‡•§');
            }

            const embed = new EmbedBuilder()
                .setTitle(`üíñ ${interaction.user.username} ‡§ï‡•Ä Favorites`)
                .setDescription(favorites.map((fav, index) => `**${index + 1}.** ${fav.title}`).join('\n'))
                .setColor(config.COLORS.INFO)
                .setFooter({ text: `‡§ï‡•Å‡§≤ ${favorites.length} favorite ‡§ó‡§æ‡§®‡•á` })
                .setTimestamp();

            return interaction.editReply({ embeds: [embed] });

        } else if (subcommand === 'play') {
            const number = interaction.options.getInteger('number');
            const favorites = db.prepare('SELECT * FROM favorites WHERE user_id = ? ORDER BY added_at DESC').all(userId);

            if (number < 1 || number > favorites.length) {
                return interaction.editReply(`‚ùå Invalid number! ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ${favorites.length} favorites ‡§π‡•à‡§Ç‡•§`);
            }

            const favorite = favorites[number - 1];

            const playCommand = require('./play.js');
            interaction.options.getString = () => favorite.url;
            
            return playCommand.execute(interaction);

        } else if (subcommand === 'remove') {
            const number = interaction.options.getInteger('number');
            const favorites = db.prepare('SELECT * FROM favorites WHERE user_id = ? ORDER BY added_at DESC').all(userId);

            if (number < 1 || number > favorites.length) {
                return interaction.editReply(`‚ùå Invalid number! ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ${favorites.length} favorites ‡§π‡•à‡§Ç‡•§`);
            }

            const favorite = favorites[number - 1];
            db.prepare('DELETE FROM favorites WHERE id = ?').run(favorite.id);

            const embed = new EmbedBuilder()
                .setTitle('üóëÔ∏è Favorite Removed')
                .setDescription(`**${favorite.title}** ‡§ï‡•ã favorites ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!`)
                .setColor(config.COLORS.ERROR)
                .setTimestamp();

            return interaction.editReply({ embeds: [embed] });
        }
    },
};
